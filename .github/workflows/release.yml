name: Build and Release with Nuitka

on:
  workflow_dispatch:  # 手动触发
    inputs:
      version:
        description: 'Release version (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
      is_prerelease:
        description: 'Is this a pre-release?'
        type: boolean
        required: false
        default: false

env:
  PYTHON_VERSION: "3.9"
  BUILD_SCRIPT: "build.py"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            artifact_suffix: linux-amd64
          - os: ubuntu-latest
            arch: arm64
            artifact_suffix: linux-arm64
            setup_arm: true
          - os: windows-latest
            arch: x86_64
            artifact_suffix: windows-amd64.exe
          - os: macos-latest
            arch: x86_64
            artifact_suffix: macos-amd64
          - os: macos-latest
            arch: universal
            artifact_suffix: macos-universal
            build_universal: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y patchelf
            if [ "${{ matrix.setup_arm }}" = "true" ]; then
              sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            fi
          fi
    
      - name: Install Nuitka and build tools
        run: |
          python -m pip install --upgrade pip
          pip install nuitka zstandard
          pip install -r requirements.txt
    

      - name: Build with Nuitka
        env:
          TARGET_ARCH: ${{ matrix.arch }}
        run: |
          python ${{ env.BUILD_SCRIPT }}
          
          if [ "${{ matrix.build_universal }}" = "true" ]; then
            python ${{ env.BUILD_SCRIPT }}
            ARCH=arm64 python ${{ env.BUILD_SCRIPT }}
            lipo -create -output dist/z0scan-macos-universal \
              dist/z0scan-darwin-x86_64 \
              dist/z0scan-darwin-arm64
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: z0scan-${{ matrix.artifact_suffix }}
          path: |
            dist/z0scan-*
            scanners/
            fingerprints/
            data/
          if-no-files-found: error

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          cp artifacts/z0scan-linux-amd64 release-assets/
          cp artifacts/z0scan-linux-arm64 release-assets/
          cp artifacts/z0scan-windows-amd64.exe release-assets/
          cp artifacts/z0scan-macos-amd64 release-assets/
          [ -f artifacts/z0scan-macos-universal ] && cp artifacts/z0scan-macos-universal release-assets/
          
          for dir in scanners fingerprints data; do
            [ -d "artifacts/$dir" ] && cp -r "artifacts/$dir" release-assets/
          done
          
          chmod +x release-assets/z0scan-linux-*
          chmod +x release-assets/z0scan-macos-*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          body: |
            ### Platform Build Matrix
            | Platform  | Arch      | File                      |
            |-----------|-----------|---------------------------|
            | Linux     | x86_64    | `z0scan-linux-amd64`      |
            | Linux     | ARM64     | `z0scan-linux-arm64`      |
            | Windows   | x86_64    | `z0scan-windows-amd64.exe`|
            | macOS     | x86_64    | `z0scan-macos-amd64`      |
            | macOS     | Universal | `z0scan-macos-universal`  |
          files: release-assets/*
          draft: false
          prerelease: ${{ github.event.inputs.is_prerelease }}
